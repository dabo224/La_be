<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload Image</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                        'primary-dark': '#4F4ECC',
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
        }
        
        .drag-over {
            @apply border-primary bg-primary/5 dark:bg-primary/10;
        }
        
        .upload-area {
            transition: all 0.3s ease;
        }
        
        .upload-area:hover {
            @apply border-primary/60 bg-gray-50 dark:bg-gray-700;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 transition-all duration-300">
    <!-- Overlay pour les modales -->
    <div id="modal-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div id="modal-content" class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-2xl max-w-sm w-full mx-4 transform transition-all duration-300 scale-95">
            <div id="modal-body" class="text-center">
                <div id="modal-icon" class="mx-auto mb-4 w-12 h-12 rounded-full flex items-center justify-center"></div>
                <h3 id="modal-title" class="text-lg font-semibold mb-2 text-gray-900 dark:text-white"></h3>
                <p id="modal-message" class="text-gray-600 dark:text-gray-300 mb-6"></p>
                <div id="modal-buttons" class="flex justify-center space-x-3"></div>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-8 max-w-2xl">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden transition-all duration-300">
            <!-- Header -->
            <div class="bg-gradient-to-r from-primary to-primary-dark p-6 text-white">
                <div class="flex items-center justify-center mb-2">
                    <svg class="w-8 h-8 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                    <h1 class="text-2xl font-bold">Photo de Profil</h1>
                </div>
                <p class="text-white/90 text-center">Choisissez une image pour personnaliser votre profil</p>
            </div>

            <!-- Contenu principal -->
            <div class="p-6 space-y-6">
                <form id="upload-form" enctype="multipart/form-data" class="space-y-6">
                    <!-- Zone de drop -->
                    <div id="drop-zone" class="upload-area relative border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-xl p-8 text-center transition-all duration-300">
                        <input type="file" id="image" name="image" accept="image/*" class="hidden" required>
                        
                        <div id="upload-prompt" class="space-y-4">
                            <div class="flex justify-center">
                                <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center">
                                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                                    </svg>
                                </div>
                            </div>
                            <div>
                                <p class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                                    Glissez votre image ici
                                </p>
                                <p class="text-gray-500 dark:text-gray-400 mb-4">
                                    ou
                                </p>
                                <button type="button" id="select-file-btn" class="inline-flex items-center px-6 py-3 bg-primary hover:bg-primary-dark text-white font-medium rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-primary/25">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                    </svg>
                                    Choisir une image
                                </button>
                            </div>
                            <p class="text-sm text-gray-400 dark:text-gray-500">
                                PNG, JPG ou GIF jusqu'à 10MB
                            </p>
                        </div>
                    </div>

                    <!-- Aperçu de l'image -->
                    <div id="preview-section" class="hidden space-y-4">
                        <div class="relative">
                            <img id="preview-image" class="w-full max-w-md mx-auto rounded-xl shadow-lg" alt="Aperçu de l'image">
                            <button type="button" id="remove-image" class="absolute top-2 right-2 w-8 h-8 bg-red-500 hover:bg-red-600 text-white rounded-full flex items-center justify-center transition-all duration-200 transform hover:scale-110">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                        <div class="text-center">
                            <p id="file-info" class="text-sm text-gray-600 dark:text-gray-400"></p>
                        </div>
                    </div>

                    <!-- Bouton de soumission -->
                    <div class="pt-4">
                        <button type="submit" id="submit-btn" disabled class="w-full py-4 bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 font-semibold rounded-xl transition-all duration-300 transform disabled:cursor-not-allowed">
                            <span id="submit-text">Sélectionnez une image d'abord</span>
                            <svg id="loading-spinner" class="hidden animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Support du mode sombre
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // Éléments DOM
        const fileInput = document.getElementById('image');
        const dropZone = document.getElementById('drop-zone');
        const uploadPrompt = document.getElementById('upload-prompt');
        const previewSection = document.getElementById('preview-section');
        const previewImage = document.getElementById('preview-image');
        const fileInfo = document.getElementById('file-info');
        const submitBtn = document.getElementById('submit-btn');
        const submitText = document.getElementById('submit-text');
        const loadingSpinner = document.getElementById('loading-spinner');
        const selectFileBtn = document.getElementById('select-file-btn');
        const removeImageBtn = document.getElementById('remove-image');

        // Fonctions pour les modales
        function showModal(type, title, message, buttons = []) {
            const overlay = document.getElementById('modal-overlay');
            const modalIcon = document.getElementById('modal-icon');
            const modalTitle = document.getElementById('modal-title');
            const modalMessage = document.getElementById('modal-message');
            const modalButtons = document.getElementById('modal-buttons');

            // Configuration des icônes selon le type
            const iconConfig = {
                success: { bg: 'bg-green-100 dark:bg-green-900', icon: 'text-green-600 dark:text-green-400', path: 'M5 13l4 4L19 7' },
                error: { bg: 'bg-red-100 dark:bg-red-900', icon: 'text-red-600 dark:text-red-400', path: 'M6 18L18 6M6 6l12 12' },
                info: { bg: 'bg-blue-100 dark:bg-blue-900', icon: 'text-blue-600 dark:text-blue-400', path: 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' }
            };

            const config = iconConfig[type] || iconConfig.info;
            modalIcon.className = `mx-auto mb-4 w-12 h-12 rounded-full flex items-center justify-center ${config.bg}`;
            modalIcon.innerHTML = `<svg class="w-6 h-6 ${config.icon}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${config.path}"/></svg>`;

            modalTitle.textContent = title;
            modalMessage.textContent = message;

            // Boutons
            modalButtons.innerHTML = '';
            if (buttons.length === 0) {
                buttons = [{text: 'OK', onClick: hideModal}];
            }

            buttons.forEach(button => {
                const btn = document.createElement('button');
                btn.className = `px-4 py-2 rounded-lg font-medium transition-all duration-200 ${button.primary ? 'bg-primary hover:bg-primary-dark text-white' : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200'}`;
                btn.textContent = button.text;
                btn.onclick = button.onClick;
                modalButtons.appendChild(btn);
            });

            overlay.classList.remove('hidden');
            overlay.classList.add('flex');
            setTimeout(() => {
                document.getElementById('modal-content').classList.remove('scale-95');
                document.getElementById('modal-content').classList.add('scale-100');
            }, 10);
        }

        function hideModal() {
            const overlay = document.getElementById('modal-overlay');
            const modalContent = document.getElementById('modal-content');
            modalContent.classList.remove('scale-100');
            modalContent.classList.add('scale-95');
            setTimeout(() => {
                overlay.classList.add('hidden');
                overlay.classList.remove('flex');
            }, 300);
        }

        // Gestion du drag & drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropZone.classList.add('drag-over');
        }

        function unhighlight() {
            dropZone.classList.remove('drag-over');
        }

        dropZone.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        }

        // Sélection de fichier
        selectFileBtn.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                handleFile(e.target.files[0]);
            }
        });

        // Suppression de l'image
        removeImageBtn.addEventListener('click', function() {
            fileInput.value = '';
            uploadPrompt.classList.remove('hidden');
            previewSection.classList.add('hidden');
            updateSubmitButton(false);
        });

        // Traitement du fichier
        function handleFile(file) {
            if (!file.type.startsWith('image/')) {
                showModal('error', 'Erreur', 'Veuillez sélectionner un fichier image valide.');
                return;
            }

            if (file.size > 10 * 1024 * 1024) {
                showModal('error', 'Erreur', 'La taille du fichier ne doit pas dépasser 10MB.');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                previewImage.src = e.target.result;
                uploadPrompt.classList.add('hidden');
                previewSection.classList.remove('hidden');
                
                // Informations sur le fichier
                const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);
                fileInfo.textContent = `${file.name} (${sizeInMB} MB)`;
                
                updateSubmitButton(true);
            };
            reader.readAsDataURL(file);
        }

        // Mise à jour du bouton de soumission
        function updateSubmitButton(hasFile) {
            if (hasFile) {
                submitBtn.disabled = false;
                submitBtn.className = 'w-full py-4 bg-primary hover:bg-primary-dark text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-primary/25';
                submitText.textContent = 'Continuer';
            } else {
                submitBtn.disabled = true;
                submitBtn.className = 'w-full py-4 bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 font-semibold rounded-xl transition-all duration-300 transform disabled:cursor-not-allowed';
                submitText.textContent = 'Sélectionnez une image d\'abord';
            }
        }

        // Soumission du formulaire
        document.getElementById('upload-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const chemin = window.location.pathname;
            const formData = new FormData();
            const fileField = document.getElementById('image');

            if (!fileField.files[0]) {
                showModal('error', 'Erreur', 'Veuillez sélectionner une image.');
                return;
            }

            // État de chargement
            submitBtn.disabled = true;
            loadingSpinner.classList.remove('hidden');
            submitText.textContent = 'Envoi en cours...';

            formData.append('image', fileField.files[0]);

            try {
                const response = await fetch(chemin, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (response.ok) {
                    showModal('success', 'Succès', result.message, [
                        {
                            text: 'Continuer',
                            primary: true,
                            onClick: () => {
                                hideModal();
                                if (result.stat) {
                                    window.location.href = '/home';
                                } else {
                                    window.location.href = '/login';
                                }
                            }
                        }
                    ]);
                } else {
                    showModal('error', 'Erreur', result.message || 'Une erreur est survenue.');
                }
            } catch (error) {
                console.error('Erreur:', error);
                showModal('error', 'Erreur', 'Une erreur est survenue. Veuillez réessayer.');
            } finally {
                // Restaurer l'état du bouton
                loadingSpinner.classList.add('hidden');
                updateSubmitButton(true);
            }
        });
    </script>
</body>
</html> 