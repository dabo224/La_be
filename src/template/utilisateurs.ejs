<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Utilisateurs</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f0f2f5;
            min-height: 100vh;
            color: #333;
            padding-top: 60px; /* Space for fixed header */
        }

        header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #fff;
            z-index: 1000;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Navigation */
        .nav-tabs {
            display: flex;
            background: #fff;
            padding: 12px;
            margin: 0;
            position: sticky;
            top: 60px;
            z-index: 999;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 100%;
            justify-content: space-between;
        }

        .nav-tab {
            flex: 1 1 auto;
            padding: 12px 20px;
            border: none;
            background: transparent;
            color: #1877f2;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            margin: 0 5px;
            border-radius: 8px;
            transition: all 0.2s ease;
            text-align: center;
        }

        .nav-tab.active {
            background: #e7f3ff;
            color: #1877f2;
        }

        .nav-tab:hover:not(.active) {
            background: #f2f2f2;
        }

        /* Section de contenu */
        .content-section {
            padding: 20px;
            margin-top: 20px;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Grille des utilisateurs */
        .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 24px;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            body {
                padding-top: 50px;
            }

            .nav-tabs {
                top: 50px;
                padding: 8px;
            }

            .nav-tab {
                padding: 8px 12px;
                font-size: 14px;
            }

            .content-section {
                padding: 16px;
                margin-top: 16px;
            }

            .users-grid {
                gap: 16px;
            }
        }

        /* Carte utilisateur */
        .user-card { 
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .user-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #1877f2, #42b72a, #f02849);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(31, 38, 135, 0.3);
        }

        .user-card:hover::before {
            opacity: 1;
        }

        .user-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid #1877f2;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .user-card:hover .user-avatar {
            border-color: #42b72a;
            transform: scale(1.05);
        }

        .user-name {
            font-size: 18px;
            font-weight: 700;
            color: #1a1a1a;
            margin-bottom: 20px;
        }

        /* Boutons d'action */
        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 10px 16px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            flex: 1;
            min-width: 80px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #1877f2, #145db2);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #145db2, #0d47a1);
            transform: translateY(-2px);
        }

        .btn-success {
            background: linear-gradient(45deg, #42b72a, #36a420);
            color: white;
        }

        .btn-success:hover {
            background: linear-gradient(45deg, #36a420, #2d8a1a);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: linear-gradient(45deg, #f02849, #c82333);
            color: white;
        }

        .btn-danger:hover {
            background: linear-gradient(45deg, #c82333, #a71e2a);
            transform: translateY(-2px);
        }

        .btn-warning {
            background: linear-gradient(45deg, #ff9500, #ff6b00);
            color: white;
        }

        .btn-warning:hover {
            background: linear-gradient(45deg, #ff6b00, #e65100);
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #e4e6eb, #d8dadf);
            color: #1877f2;
        }

        .btn-secondary:hover {
            background: linear-gradient(45deg, #1877f2, #145db2);
            color: white;
        }

        /* Syst√®me de notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            pointer-events: none;
        }

        .toast {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 10px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            gap: 12px;
            min-width: 300px;
            max-width: 400px;
            transform: translateX(100%);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: auto;
        }

        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }

        .toast.hide {
            transform: translateX(100%);
            opacity: 0;
        }

        .toast-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            flex-shrink: 0;
        }

        .toast.success .toast-icon {
            background: linear-gradient(45deg, #42b72a, #36a420);
            color: white;
        }

        .toast.error .toast-icon {
            background: linear-gradient(45deg, #f02849, #c82333);
            color: white;
        }

        .toast.warning .toast-icon {
            background: linear-gradient(45deg, #ff9500, #ff6b00);
            color: white;
        }

        .toast.info .toast-icon {
            background: linear-gradient(45deg, #1877f2, #145db2);
            color: white;
        }

        .toast-content {
            flex: 1;
        }

        .toast-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 2px;
            color: #1a1a1a;
        }

        .toast-message {
            font-size: 13px;
            color: #666;
            line-height: 1.4;
        }

        .toast-close {
            background: none;
            border: none;
            color: #999;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .toast-close:hover {
            background: rgba(0, 0, 0, 0.1);
            color: #666;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .nav-tabs {
                flex-direction: column;
                gap: 5px;
            }

            .nav-tab {
                padding: 12px 15px;
                font-size: 14px;
            }

            .users-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 15px;
            }

            .user-card {
                padding: 20px;
            }

            .user-avatar {
                width: 80px;
                height: 80px;
            }

            .action-buttons {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }

            .toast-container {
                top: 10px;
                right: 10px;
                left: 10px;
            }

            .toast {
                min-width: auto;
                max-width: none;
            }
        }

        @media (max-width: 480px) {
            .users-grid {
                grid-template-columns: 1fr;
            }

            .user-card {
                padding: 15px;
            }

            .user-avatar {
                width: 70px;
                height: 70px;
            }

            .user-name {
                font-size: 16px;
            }
        }

        /* √âtat vide */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state h3 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333;
        }

        .empty-state p {
            font-size: 16px;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <%- include('./partials/header') %>

    <!-- Container pour les notifications -->
    <div class="toast-container" id="toastContainer"></div>

    <div class="container">
        <!-- Navigation -->
        <div class="nav-tabs">
            <button class="nav-tab active" data-section="amis">üë• Amis</button>
            <button class="nav-tab" data-section="attente">‚è≥ Demandes en attente</button>
            <button class="nav-tab" data-section="suggestion">üí° Suggestions</button>
        </div>

        <!-- Section Amis -->
        <div id="section-amis" class="content-section active">
            <div class="users-grid">
                <% if (amis && amis.length > 0) { %>
                    <% amis.forEach(user => { %>
                        <div class="user-card">
                            <img src="/static/profil/<%= user.Profil.urlPhoto %>" alt="<%= user.prenom %> <%= user.nom %>" class="user-avatar">
                            <div class="user-name"><%= user.prenom %> <%= user.nom %></div>
                            <div class="action-buttons">
                                <% if (user.Reception) { %>
                                    <button class="btn btn-success acc_demande" data-friendId="<%= user.id %>" data-notifId="<%= user.Reception %>">‚úÖ Accepter</button>
                                    <button class="btn btn-danger ref_demande" data-notifId="<%= user.Reception %>">‚ùå Refuser</button>
                                <% } else if(user.Envoi) { %>
                                    <button class="btn btn-warning ann_demande" data-friendId="<%= user.id %>" data-notifId="<%= user.Envoi %>">üîÑ Annuler</button>
                                    <button class="btn btn-danger supp">üóëÔ∏è Supprimer</button>
                                <% } else if(user.Friends) { %>
                                    <button class="btn btn-secondary voir_profil" data-friendId="<%= user.id %>">üë§ Profil</button>
                                    <button class="btn btn-danger supp">üóëÔ∏è Supprimer</button>
                                <% } else { %>
                                    <button class="btn btn-primary ajout_ami" data-friendId="<%= user.id %>">‚ûï Ajouter</button>
                                    <button class="btn btn-secondary voir_profil">üë§ Profil</button>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <h3>Aucun ami trouv√©</h3>
                        <p>Commencez √† ajouter des amis pour voir vos connexions ici.</p>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Section Demandes en attente -->
        <div id="section-attente" class="content-section">
            <div class="users-grid">
                <% if (attentes && attentes.length > 0) { %>
                    <% attentes.forEach(user => { %>
                        <div class="user-card">
                            <img src="/static/profil/<%= user.Profil.urlPhoto %>" alt="<%= user.prenom %> <%= user.nom %>" class="user-avatar">
                            <div class="user-name"><%= user.prenom %> <%= user.nom %></div>
                            <div class="action-buttons">
                                <% if (user.Reception) { %>
                                    <button class="btn btn-success acc_demande" data-friendId="<%= user.id %>" data-notifId="<%= user.Reception %>">‚úÖ Accepter</button>
                                    <button class="btn btn-danger ref_demande" data-notifId="<%= user.Reception %>">‚ùå Refuser</button>
                                <% } else if(user.Envoi) { %>
                                    <button class="btn btn-secondary voir_profil">üë§ Profil</button>
                                    <button class="btn btn-warning ann_demande" data-notifId="<%= user.Envoi %>" data-friendId="<%= user.id %>">üîÑ Annuler</button>
                                <% } else if(user.Friends) { %>
                                    <button class="btn btn-secondary voir_profil" data-friendId="<%= user.id %>">üë§ Profil</button>
                                    <button class="btn btn-danger supp">üóëÔ∏è Supprimer</button>
                                <% } else { %>
                                    <button class="btn btn-primary ajout_ami" data-friendId="<%= user.id %>">‚ûï Ajouter</button>
                                    <button class="btn btn-secondary voir_profil">üë§ Profil</button>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <h3>Aucune demande en attente</h3>
                        <p>Vous n'avez aucune demande d'ami en attente pour le moment.</p>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Section Suggestions -->
        <div id="section-suggestion" class="content-section">
            <div class="users-grid">
                <% if (suggestions && suggestions.length > 0) { %>
                    <% suggestions.forEach(user => { %>
                        <div class="user-card">
                            <img src="/static/profil/<%= user.Profil.urlPhoto %>" alt="<%= user.prenom %> <%= user.nom %>" class="user-avatar">
                            <div class="user-name"><%= user.prenom %> <%= user.nom %></div>
                            <div class="action-buttons">
                                <% if (user.Reception) { %>
                                    <button class="btn btn-success acc_demande" data-friendId="<%= user.id %>" data-notifId="<%= user.Reception.id %>">‚úÖ Accepter</button>
                                    <button class="btn btn-danger ref_demande" data-notifId="<%= user.Reception.id %>">‚ùå Refuser</button>
                                <% } else if(user.Envoi) { %>
                                    <button class="btn btn-warning ann_demande" data-friendId="<%= user.id %>" data-notifId="<%= user.Envoi %>">üîÑ Annuler</button>
                                    <button class="btn btn-danger supp">üóëÔ∏è Supprimer</button>
                                <% } else if(user.Friends) { %>
                                    <button class="btn btn-secondary voir_profil" data-friendId="<%= user.id %>">üë§ Profil</button>
                                    <button class="btn btn-danger supp">üóëÔ∏è Supprimer</button>
                                <% } else { %>
                                    <button class="btn btn-primary ajout_ami" data-friendId="<%= user.id %>">‚ûï Ajouter</button>
                                    <button class="btn btn-secondary voir_profil">üë§ Profil</button>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <h3>Aucune suggestion</h3>
                        <p>Nous n'avons pas de suggestions d'amis pour vous pour le moment.</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        // Syst√®me de notifications
        class ToastNotification {
            constructor() {
                this.container = document.getElementById('toastContainer');
            }

            show(type, title, message, duration = 4000) {
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                
                const icon = this.getIcon(type);
                
                toast.innerHTML = `
                    <div class="toast-icon">${icon}</div>
                    <div class="toast-content">
                        <div class="toast-title">${title}</div>
                        <div class="toast-message">${message}</div>
                    </div>
                    <button class="toast-close" onclick="this.parentElement.remove()">√ó</button>
                `;

                this.container.appendChild(toast); 
                

                // Animation d'entr√©e
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);

                // Auto-suppression
                if (duration > 0) {
                    setTimeout(() => {
                        this.hide(toast);
                    }, duration);
                }

                return toast;
            }

            hide(toast) {
                toast.classList.add('hide');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.remove();
                    }
                }, 300);
            }

            getIcon(type) {
                const icons = {
                    success: '‚úÖ',
                    error: '‚ùå',
                    warning: '‚ö†Ô∏è',
                    info: '‚ÑπÔ∏è'
                };
                return icons[type] || '‚ÑπÔ∏è';
            }

            success(title, message, duration) {
                return this.show('success', title, message, duration);
            }

            error(title, message, duration) {
                return this.show('error', title, message, duration);
            }

            warning(title, message, duration) {
                return this.show('warning', title, message, duration);
            }

            info(title, message, duration) {
                return this.show('info', title, message, duration);
            }
        }

        // Instance globale des notifications
        const toast = new ToastNotification();

        // Fonction pour d√©coder le token JWT (√† adapter selon votre impl√©mentation)
        function decode() {
            try {
                // R√©cup√©rer le token depuis localStorage ou sessionStorage
                const token = localStorage.getItem('token') || sessionStorage.getItem('token');
                if (!token) {
                    console.error('Token non trouv√©');
                    return { userId: null };
                }
                
                // D√©coder le token (exemple simple)
                const payload = JSON.parse(atob(token.split('.')[1]));
                return { userId: payload.userId || payload.id };
            } catch (error) {
                console.error('Erreur lors du d√©codage du token:', error);
                return { userId: null };
            }
        }

        // Navigation
        const navTabs = document.querySelectorAll('.nav-tab');
        const contentSections = document.querySelectorAll('.content-section');

        navTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Retirer la classe active de tous les onglets et sections
                navTabs.forEach(t => t.classList.remove('active'));
                contentSections.forEach(s => s.classList.remove('active'));

                // Ajouter la classe active √† l'onglet cliqu√©
                tab.classList.add('active');

                // Afficher la section correspondante
                const sectionId = `section-${tab.dataset.section}`;
                const targetSection = document.getElementById(sectionId);
                if (targetSection) {
                    targetSection.classList.add('active');
                }
            });
        });

        // Gestion des boutons
        document.querySelectorAll('.ajout_ami').forEach(btn => {
            btn.addEventListener('click', async () => {
                try {
                    const userId = decode().userId;
                    if (!userId) {
                        toast.error('Erreur', 'Utilisateur non connect√©');
                        return;
                    }

                    const response = await fetch('/notif?demande=true', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            userID: btn.getAttribute('data-friendId'), 
                            senderId: userId 
                        })
                    });
                    
                    if (response.ok) {
                        toast.success('Succ√®s', 'Demande envoy√©e avec succ√®s');
                        btn.textContent = '‚úÖ Demande envoy√©e';
                        btn.disabled = true;
                    } else {
                        toast.error('Erreur', 'Erreur lors de l\'envoi de la demande');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    toast.error('Erreur', 'Erreur lors de l\'envoi de la demande');
                }
            });
        });

        document.querySelectorAll('.ref_demande').forEach(btn => {
            btn.addEventListener('click', async () => {
                try {
                    const notifId = btn.getAttribute('data-notifId');
                    if (!notifId) {
                        toast.error('Erreur', 'ID de notification manquant');
                        return;
                    }

                    const response = await fetch(`/notif/${notifId}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (result.delete) {
                        btn.closest('.user-card').remove();
                        toast.success('Succ√®s', 'Demande refus√©e');
                    } else {
                        toast.error('Erreur', 'Erreur lors du refus de la demande');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    toast.error('Erreur', 'Erreur lors du refus de la demande');
                }
            });
        });

        document.querySelectorAll('.acc_demande').forEach(btn => {
            btn.addEventListener('click', async () => {
                try {
                    const userId = decode().userId;
                    if (!userId) {
                        toast.error('Erreur', 'Utilisateur non connect√©');
                        return;
                    }

                    const response = await fetch('/friend', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            friendId: btn.getAttribute('data-friendId'), 
                            userId: userId 
                        })
                    });
                    const result = await response.json();
                    if (result.friend) {
                        btn.closest('.user-card').remove();
                        toast.success('Succ√®s', 'Demande d\'ami accept√©e avec succ√®s');
                        
                        // Supprimer la notification
                        const notifId = btn.getAttribute('data-notifId');
                        if (notifId) {
                            await fetch(`/notif/${notifId}?all=true`, { method: 'DELETE' });
                        }
                    } else {
                        toast.error('Erreur', 'Erreur lors de l\'acceptation de la demande');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    toast.error('Erreur', 'Erreur lors de l\'acceptation de la demande');
                }
            });
        });

        document.querySelectorAll('.ann_demande').forEach(btn => {
            btn.addEventListener('click', async () => {
                try {
                    const notifId = btn.getAttribute('data-notifId');
                    if (!notifId) {
                        toast.error('Erreur', 'ID de notification manquant');
                        return;
                    }

                    const response = await fetch(`/notif/${notifId}?all=true`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (result.delete) {
                        location.reload();
                    } else {
                        toast.error('Erreur', 'Erreur lors de l\'annulation de la demande');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    toast.error('Erreur', 'Erreur lors de l\'annulation de la demande');
                }
            });
        });

        // Gestion des boutons "Voir profil" et "Supprimer"
        document.querySelectorAll('.voir_profil').forEach(btn => {
            btn.addEventListener('click', () => {
                const friendId = btn.getAttribute('data-friendId');
                if (friendId) {
                    window.location.href = `/profil/${friendId}`;
                } else {
                    toast.error('Erreur', 'ID utilisateur manquant');
                }
            });
        });

        document.querySelectorAll('.supp').forEach(btn => {
            btn.addEventListener('click', () => {
                if (confirm('√ätes-vous s√ªr de vouloir supprimer cet ami ?')) {
                    // Logique de suppression √† impl√©menter
                    toast.info('Info', 'Fonctionnalit√© de suppression √† impl√©menter');
                }
            });
        });
    </script>
</body>
</html>